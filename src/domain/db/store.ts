import * as SecureStore from 'expo-secure-store';

const MAX_SIZE = 2048; // Gi·ªõi h·∫°n 2KB

export const saveLargeData = async (key:string, base64Data:string) => {
  const size = new TextEncoder().encode(base64Data).length;
  console.log(`üìè K√≠ch th∆∞·ªõc d·ªØ li·ªáu: ${size} bytes`);

  if (size <= MAX_SIZE) {
    // N·∫øu nh·ªè h∆°n 2KB, l∆∞u b√¨nh th∆∞·ªùng
    await SecureStore.setItemAsync(key, base64Data);
    console.log('‚úÖ D·ªØ li·ªáu ƒë√£ l∆∞u v√†o SecureStore');
    return;
  }

  // N·∫øu l·ªõn h∆°n 2KB, chia nh·ªè d·ªØ li·ªáu
  const parts = [];
  for (let i = 0; i < base64Data.length; i += MAX_SIZE) {
    parts.push(base64Data.substring(i, i + MAX_SIZE));
  }

  // L∆∞u t·ª´ng ph·∫ßn v√†o SecureStore
  for (let i = 0; i < parts.length; i++) {
    await SecureStore.setItemAsync(`${key}_part${i}`, parts[i]);
  }

  // L∆∞u s·ªë l∆∞·ª£ng ph·∫ßn ƒë·ªÉ gh√©p l·∫°i khi l·∫•y
  await SecureStore.setItemAsync(`${key}_count`, parts.length.toString());
  console.log(`‚úÖ D·ªØ li·ªáu ƒë√£ chia th√†nh ${parts.length} ph·∫ßn v√† l∆∞u v√†o SecureStore`);
};

export const getLargeData = async (key:string) => {
  try {
    const count = await SecureStore.getItemAsync(`${key}_count`);
    if (!count) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu');
      return null;
    }

    let fullData = '';
    for (let i = 0; i < parseInt(count, 10); i++) {
      const part = await SecureStore.getItemAsync(`${key}_part${i}`);
      if (part) {
        fullData += part;
      } else {
        console.warn(`‚ö†Ô∏è Ph·∫ßn ${i} b·ªã m·∫•t`);
        return null;
      }
    }

    console.log('‚úÖ D·ªØ li·ªáu ƒë√£ gh√©p l·∫°i th√†nh c√¥ng');
    return fullData;
  } catch (error) {
    console.error('‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu:', error);
    return null;
  }
};
